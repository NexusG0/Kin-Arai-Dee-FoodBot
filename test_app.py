import streamlit as st
import os
from dotenv import load_dotenv
from litellm import completion
import random
import json

# ‡πÇ‡∏´‡∏•‡∏î API Key
load_dotenv()
GROQ_KEY = os.getenv("GROQ_API_KEY")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")

os.environ["GROQ_API_KEY"] = GROQ_KEY
os.environ["OPENAI_API_KEY"] = OPENAI_KEY

# -------------------------------
# Model list
MODELS = {
    "üß† OpenAI GPT (gpt-4o-mini)": {
        "id": "gpt-4o-mini",
        "api_key": OPENAI_KEY,
    },
    "ü¶ô LLaMA 3.1 8B Instant": {
        "id": "groq/llama-3.1-8b-instant",
        "api_key": GROQ_KEY,
    },
    "ü¶ô LLaMA 3.3 70B Versatile": {
        "id": "groq/llama-3.3-70b-versatile",
        "api_key": GROQ_KEY,
    },
    "üêã DeepSeek R1 Distill 70B": {
        "id": "groq/deepseek-r1-distill-llama-70b",
        "api_key": GROQ_KEY,
    },
    "üß™ Gemma 2 9B": {
        "id": "groq/gemma2-9b-it",
        "api_key": GROQ_KEY,
    },
}

# -------------------------------
# Basic Menu List
basic_menu = [
    "‡∏Ç‡πâ‡∏≤‡∏ß‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡πÑ‡∏Ç‡πà‡∏î‡∏≤‡∏ß üç≥",
    "‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß‡πÄ‡∏£‡∏∑‡∏≠ ü•¢",
    "‡∏™‡πâ‡∏°‡∏ï‡∏≥ ‡πÑ‡∏Å‡πà‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡πâ‡∏≤‡∏ß‡πÄ‡∏´‡∏ô‡∏µ‡∏¢‡∏ß üêî",
    "‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏Å‡∏∏‡πâ‡∏á üç§",
    "‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢ ü•ú",
    "‡∏ä‡∏≤‡∏ö‡∏π üç≤",
    "‡∏´‡∏°‡∏π‡∏Å‡∏£‡∏∞‡∏ó‡∏∞ üê∑üî•",
    "‡∏£‡∏≤‡πÄ‡∏°‡∏á üçú",
    "‡∏ã‡∏π‡∏ä‡∏¥ üç£",
    "‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤ üçï"
]

# -------------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON
def load_food_data(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        return json.load(file)

food_data = load_food_data('foodlist.json')

# -------------------------------
# Function Calling: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏ô JSON
def search_food_in_json(criteria: str):
    """
    criteria: ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå ‡πÄ‡∏ä‡πà‡∏ô '‡πÄ‡∏ú‡πá‡∏î', '‡πÄ‡∏ö‡∏≤‡πÜ', '‡∏ã‡∏µ‡∏ü‡∏π‡πâ‡∏î'
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
    """
    result = []
    c = criteria.lower()

    for item in food_data:
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏≥‡∏´‡∏•‡∏±‡∏Å‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏ú‡πá‡∏î, ‡∏ã‡∏µ‡∏ü‡∏π‡πâ‡∏î, ‡∏´‡∏°‡∏π, ‡∏ú‡∏±‡∏Å
        if "‡πÄ‡∏ú‡πá‡∏î" in c and item.get("spicy"):
            result.append(item)
        elif "‡∏ã‡∏µ‡∏ü‡∏π‡πâ‡∏î" in c and item.get("seafood"):
            result.append(item)
        elif "‡∏´‡∏°‡∏π" in c and "pork" in item.get("meat", []):
            result.append(item)
        elif "‡∏ú‡∏±‡∏Å" in c and item.get("green_level") != "none":
            result.append(item)
        elif "‡πÄ‡∏ö‡∏≤" in c and item.get("avg_calories", 0) < 300:
            result.append(item)

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    if not result:
        result = food_data

    return random.choice(result)

# -------------------------------
# UI
st.set_page_config(page_title="FoodBot Kin-Arai-Dee üçú", page_icon="üçΩÔ∏è")
st.title("üçΩ Kin-Arai-Dee FoodBot")
st.title("‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏∞‡∏Å‡∏¥‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏î‡∏µ ‡∏ö‡∏≠‡∏Å‡∏â‡∏±‡∏ô‡∏™‡∏¥!")

# Simple random
if st.button("üçΩÔ∏è ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ (‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏µ‡∏¢ Token)"):
    suggestion = random.choice(basic_menu)
    st.success(f"ü•¢ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏•‡∏≠‡∏á‡∏Å‡∏¥‡∏ô **{suggestion}** ‡∏î‡∏π‡πÑ‡∏´‡∏°?")

st.divider()

selected_model = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• AI", list(MODELS.keys()))
model_info = MODELS[selected_model]
user_input = st.text_input("‡∏Ñ‡∏∏‡∏ì:", placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏¢‡∏≤‡∏Å‡∏Å‡∏¥‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡πÅ‡∏ã‡∏ö‡πÜ, ‡∏≠‡∏¢‡∏≤‡∏Å‡∏Å‡∏¥‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏ö‡∏≤‡πÜ, ...")

# -------------------------------
# üß† Function Calling ‡∏ú‡πà‡∏≤‡∏ô LiteLLM
if st.button("üß† ‡πÉ‡∏´‡πâ AI ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏¥‡∏î‡πÄ‡∏°‡∏ô‡∏π (Function Calling)"):
    if user_input.strip():
        with st.spinner(f"Thinking {selected_model}..."):

            # Function schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI
            functions = [
                {
                    "name": "search_food_in_json",
                    "description": "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "criteria": {
                                "type": "string",
                                "description": "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô '‡πÄ‡∏ú‡πá‡∏î', '‡πÄ‡∏ö‡∏≤‡πÜ', '‡∏ã‡∏µ‡∏ü‡∏π‡πâ‡∏î'"
                            }
                        },
                        "required": ["criteria"]
                    }
                }
            ]

            response = completion(
                model=model_info["id"],
                messages=[
                    {"role": "system", "content": "You are a food assistant who chooses food from a JSON database."},
                    {"role": "user", "content": user_input}
                ],
                functions=functions,
                temperature=0.5,
                api_key=model_info["api_key"]
            )

            choice = response["choices"][0]
            if choice["finish_reason"] == "function_call":
                func_call = choice["message"]["function_call"]
                func_name = func_call.name
                func_args = json.loads(func_call.arguments)

                if func_name == "search_food_in_json":
                    menu = search_food_in_json(func_args["criteria"])
                    st.success(f"üçú ‡∏•‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ‡∏î‡∏π‡πÑ‡∏´‡∏°: **{menu['name']}** ({menu['eng_name']})")
                    st.info(f"üåø ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {menu['avg_calories']} kcal | üáπüá≠ {menu['cuisine']}")
            else:
                st.warning("AI ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡∏ö")


    else:
        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö üòä")
